import User from "../models/user";
import genToken from "../utils/genToken";
import { sendResponse } from "../utils/response";

export const signUp= async(req,res)=>{
    try{
        const {fullName,email,password,mobile,role}=req.body;
        const user = await User.findOne({email});
        if(user)
        {
            return sendResponse(res,400,"User already exists");
        }
        if(password.length<6){
            return sendResponse(res,400,"Password must be at least 6 characters long");
        }
        if(mobile.length<10){
            return sendResponse(res,400,"Mobile number must be at least 10 digits long");
        }
        const hashedPassword=await bcrypt.hash(password,10);

        user = await User.create({

            fullName,
            email,
            password:hashedPassword,
            mobile,
            role
        })

        const token = await genToken(user._id);
        res.cookie("token",token,{
            secure:false,
            sameSite:"strict",
            maxAge:24*60*60*1000 ,// 1 day
            httpOnly:true
        })
        return sendResponse(res,201,"User created successfully",{
            id:user._id,
            fullName:user.fullName,
            email:user.email,
                    mobile:user.mobile,
                    role:user.role,
            
                token
            });


    }
    catch(error)
    {
        console.error("Error in signUp:", error);
        return sendResponse(res,500,"Internal server error");
    }
}

export const signIn=async(req,res)=>{
    try{
        const {email,password}=req.body;
        const user = await User.findOne({email});
        if(!user)
        {
            return sendResponse(res,400,"User not found");
        }
        const isMatch = await bcrypt.compare(password,user.password);
        if(!isMatch)
        {
            return sendResponse(res,400,"Invalid credentials");
        }
        const token = await genToken(user._id);
        res.cookie("token",token,{
            secure:false,
            sameSite:"strict",
            maxAge:24*60*60*1000 ,
            httpOnly:true
        })
        return sendResponse(res,200,"User signed in successfully",{
            user:{
                id:user._id,
                fullName:user.fullName,
                email:user.email,
                mobile:user.mobile,
                role:user.role
            },
            token
        });
    }
    catch(error)
    {
        console.error("Error in signIn:", error);
        return res.sendResponse(res, 500, "Internal server error")
    }
}

export const signOut=async(req,res)=>{
    try{
        res.clearCookie("token");
         return sendResponse(res, 200, "User signed out successfully");
    }
    catch(error)
    {
        console.error("Error in signOut:", error);
        return sendResponse(res, 500, "Internal server error");
    }
}