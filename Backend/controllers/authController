import User from "../models/user";

const signUp= async(req,res)=>{
    try{
        const {fullName,email,password,mobile,role}=req.body;
        const user = await User.findOne({email});
        if(user)
        {
            return res.status(400).json({message:"User already exists"});
        }
        if(password.length<6){
            return res.status(400).json({message:"Password must be at least 6 characters long"});
        }
        if(mobile.length<10){
            return res.status(400).json({message:"Mobile number must be at least 10 digits long"});
        }
        const hashedPassword=await bcrypt.hash(password,10);

        user = await User.create({

            fullName,
            email,
            password:hashedPassword,
            mobile,
            role
        })

        const token = await genToken(user._id);
        res.cookie("token",token,{
            secure:false,
            sameSite:"strict",
            maxAge:24*60*60*1000 ,// 1 day
            httpOnly:true
        })
            return res.status(201).json({
                message:"User created successfully",
                user:{
                    id:user._id,
                    fullName:user.fullName,
                    email:user.email,
                    mobile:user.mobile,
                    role:user.role
                },
                token
            });


    }
    catch(error)
    {
        console.error("Error in signUp:", error);
        res.status(500).json({message:"Internal server error"});
    }
}

const signIn=async(req,res)=>{
    try{
        const {email,password}=req.body;
        const user = await User.findOne({email});
        if(!user)
        {
            return res.status(400).json({message:"User not found"});
        }
        const isMatch = await bcrypt.compare(password,user.password);
        if(!isMatch)
        {
            return res.status(400).json({message:"Invalid credentials"});
        }
        const token = await genToken(user._id);
        res.cookie("token",token,{
            secure:false,
            sameSite:"strict",
            maxAge:24*60*60*1000 ,
            httpOnly:true
        })
        return res.status(200).json({
            message:"User signed in successfully",
            user:{
                id:user._id,
                fullName:user.fullName,
                email:user.email,
                mobile:user.mobile,
                role:user.role
            },
            token
        });
    }
    catch(error)
    {
        console.error("Error in signIn:", error);
        res.status(500).json({message:"Internal server error"});
    }
}